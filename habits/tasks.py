import os
import logging
from datetime import datetime, timedelta

from telegram import Bot, ParseMode
from celery import shared_task
from django.conf import settings
from django.utils import timezone
from django.db.models import Count, Q

from habits.models import Habit, HabitCompletion
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')


@shared_task
def send_habit_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."""
    now = timezone.now()
    current_time = now.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç
    time_threshold = (now + timedelta(minutes=30)).time()

    # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø—Ä–∏–º–µ—Ä 23:45, –∞ time_threshold –±—É–¥–µ—Ç 00:15
    if current_time > time_threshold:
        habits_to_remind = Habit.objects.filter(
            time_to_complete__gte=current_time
        ) | Habit.objects.filter(
            time_to_complete__lte=time_threshold
        )
    else:
        habits_to_remind = Habit.objects.filter(
            time_to_complete__gte=current_time,
            time_to_complete__lte=time_threshold
        )

    # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
    today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)

    count = 0
    for habit in habits_to_remind:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
        is_completed_today = HabitCompletion.objects.filter(
            habit=habit,
            completed_at__gte=today_start
        ).exists()

        if not is_completed_today:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º .delay() –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            send_habit_reminder.delay(habit.id)
            count += 1

    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö")
    return count


@shared_task
def send_habit_reminder(habit_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ –±–∞–∑—ã –ø–æ ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        habit = Habit.objects.get(id=habit_id)
        bot = Bot(token=TELEGRAM_BOT_TOKEN)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from telegram_bot import user_data

        user_id = habit.user_id
        telegram_chat_id = None

        # –ü–æ–∏—Å–∫ telegram_chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for chat_id, data in user_data.items():
            if data.get('user_id') == user_id:
                telegram_chat_id = chat_id
                break

        if telegram_chat_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_text = format_habit_reminder(habit)

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
                bot.send_message(
                    chat_id=telegram_chat_id,
                    text=reminder_text,
                    parse_mode=ParseMode.MARKDOWN
                )
                logger.info(
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ {habit.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                return False
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω telegram_chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
    except Habit.DoesNotExist:
        logger.error(f"–ü—Ä–∏–≤—ã—á–∫–∞ —Å ID {habit_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False


@shared_task
def schedule_reminder(habit_id, minutes_before=30):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è"""
    try:
        habit = Habit.objects.get(id=habit_id)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        now = timezone.now()
        reminder_time = now + timedelta(minutes=minutes_before)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        send_habit_reminder.apply_async(
            args=[habit_id],
            eta=reminder_time
        )
        return True  # –í–∞–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False


@shared_task
def schedule_weekly_reminders():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥"""
    habits = Habit.objects.filter(is_active=True)
    scheduled = 0

    for habit in habits:
        if schedule_reminder(habit.id):
            scheduled += 1

    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scheduled} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é")
    return scheduled


def format_habit_reminder(habit):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ."""
    message = f"‚è∞ *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï*\n\n"
    message += f"–ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: *{habit.name}*\n"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    if habit.time_to_complete:
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç datetime/time, –∏—Å–ø–æ–ª—å–∑—É–µ–º strftime
            time_str = habit.time_to_complete.strftime('%H:%M')
        except (AttributeError, TypeError):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            time_str = habit.time_to_complete
        message += f"–í—Ä–µ–º—è: {time_str}\n"

    if habit.place:
        message += f"–ú–µ—Å—Ç–æ: {habit.place}\n"

    if habit.action:
        message += f"–î–µ–π—Å—Ç–≤–∏–µ: {habit.action}\n"

    message += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {habit.estimated_duration} –º–∏–Ω—É—Ç\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö –∏–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞—Ö
    if hasattr(habit, 'related_habit') and habit.related_habit:
        message += f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ: _{habit.related_habit.name}_\n"
    elif hasattr(habit, 'reward') and habit.reward:
        message += f"–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: _{habit.reward}_\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    completions_count = HabitCompletion.objects.filter(habit=habit).count()
    if completions_count > 0:
        message += f"\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É {completions_count} —Ä–∞–∑!\n"

    message += "\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –±–æ—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /complete"

    return message


@shared_task
def send_daily_statistics(user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫"""
    try:
        today = timezone.now().date()
        yesterday = today - timedelta(days=1)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        habits = Habit.objects.filter(user_id=user_id)
        total_habits = habits.count()

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤—á–µ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏
        completed_yesterday = HabitCompletion.objects.filter(
            habit__user_id=user_id,
            completed_at__date=yesterday
        ).values('habit').distinct().count()

        # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completion_percentage = (
                    completed_yesterday / total_habits * 100) if total_habits > 0 else 0

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from telegram_bot import user_data

        telegram_chat_id = None
        # –ü–æ–∏—Å–∫ telegram_chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for chat_id, data in user_data.items():
            if data.get('user_id') == user_id:
                telegram_chat_id = chat_id
                break

        if telegram_chat_id:
            bot = Bot(token=TELEGRAM_BOT_TOKEN)

            message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {yesterday.strftime('%d.%m.%Y')}*\n\n"
            message += f"–í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {total_habits}\n"
            message += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—á–µ—Ä–∞: {completed_yesterday}\n"
            message += f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_percentage:.1f}%\n\n"

            if completion_percentage >= 80:
                message += "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            elif completion_percentage >= 50:
                message += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –±–æ–ª—å—à–µ–º—É!"
            else:
                message += "üí™ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!"

            bot.send_message(
                chat_id=telegram_chat_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
            return True
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω telegram_chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def get_chat_id_by_user(user_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from telegram_bot import user_data

    telegram_chat_id = None
    # –ü–æ–∏—Å–∫ telegram_chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for chat_id, data in user_data.items():
        if data.get('user_id') == user_id:
            telegram_chat_id = chat_id
            break

    return telegram_chat_id